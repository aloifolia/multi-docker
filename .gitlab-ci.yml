image: docker:git
services:
  - docker:dind

stages:
  - test
  - build
  - deploy

before_script:
  # Log in to the docker CLI.
  - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_ID" --password-stdin

test:client:
  stage: test
  script:
    - docker build -t react-test -f ./client/Dockerfile.dev ./client
    - docker run -e CI=true react-test npm test

build-and-push-images:
  stage: deploy
  needs: ["test:client"]
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'
  script:
    - docker build -t bagor/multi-client ./client
    - docker build -t bagor/multi-nginx ./nginx
    - docker build -t bagor/multi-server ./server
    - docker build -t bagor/multi-worker ./worker
    # Take those images and push them to docker hub.
    - docker push bagor/multi-client
    - docker push bagor/multi-nginx
    - docker push bagor/multi-server
    - docker push bagor/multi-worker

notify-aws:
  stage: deploy
  needs: ["build-and-push-images"]
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'
  script:
    - mkdir ~/.aws
    - touch ~/.aws/credentials
    - echo "aws_access_key_id=$AWS_ACCESS_KEY_ID" >> ~/.aws/credentials
    - echo "aws_secret_access_key=$AWS_SECRET_ACCESS_KEY" >> ~/.aws/credentials
    - docker run -v ~/.aws:/root/.aws amazon/aws-cli elasticbeanstalk rebuild-environment --environment-id $AWS_ENVIRONMENT_ID --region $AWS_REGION
